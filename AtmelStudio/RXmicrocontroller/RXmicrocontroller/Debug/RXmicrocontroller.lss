
RXmicrocontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000006e0  00000774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  0080010a  0080010a  0000077e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b34  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ca  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000389  00000000  00000000  00001b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00001ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e3  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000827  00000000  00000000  00002583  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002daa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 32       	cpi	r26, 0x27	; 39
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  9e:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupRX>:
	for(int i=0;i<N_SERVOS;i++)
	{
		writeangle(i, motoranglesvalues[i]);//writes angle value to servos
		_delay_ms(10);
	}
}
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  b0:	80 e9       	ldi	r24, 0x90	; 144
  b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  b6:	86 e2       	ldi	r24, 0x26	; 38
  b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  bc:	08 95       	ret

000000be <initServo>:
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	8f 67       	ori	r24, 0x7F	; 127
  c2:	87 b9       	out	0x07, r24	; 7
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	80 6c       	ori	r24, 0xC0	; 192
  c8:	8a b9       	out	0x0a, r24	; 10
  ca:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  ce:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  d2:	80 58       	subi	r24, 0x80	; 128
  d4:	91 4c       	sbci	r25, 0xC1	; 193
  d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  ea:	08 95       	ret

000000ec <writepotval>:
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	f8 94       	cli
  f2:	c8 2f       	mov	r28, r24
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 75 02 	call	0x4ea	; 0x4ea <__floatsisf>
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	4a e7       	ldi	r20, 0x7A	; 122
 106:	56 e4       	ldi	r21, 0x46	; 70
 108:	0e 94 01 03 	call	0x602	; 0x602 <__mulsf3>
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	4f e7       	ldi	r20, 0x7F	; 127
 112:	53 e4       	ldi	r21, 0x43	; 67
 114:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__divsf3>
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	4a e7       	ldi	r20, 0x7A	; 122
 11e:	56 e4       	ldi	r21, 0x46	; 70
 120:	0e 94 66 01 	call	0x2cc	; 0x2cc <__addsf3>
 124:	0e 94 44 02 	call	0x488	; 0x488 <__fixunssfsi>
 128:	cc 0f       	add	r28, r28
 12a:	dd 1f       	adc	r29, r29
 12c:	c1 5f       	subi	r28, 0xF1	; 241
 12e:	de 4f       	sbci	r29, 0xFE	; 254
 130:	79 83       	std	Y+1, r23	; 0x01
 132:	68 83       	st	Y, r22
 134:	78 94       	sei
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <setmotorspot>:

void setmotorspot(){
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	0f e1       	ldi	r16, 0x1F	; 31
 144:	11 e0       	ldi	r17, 0x01	; 1
 146:	c0 e0       	ldi	r28, 0x00	; 0
	for(int i=0;i<N_SERVOS;i++)
	{
		writepotval(i, motoranglesvalues[i]);//write 8-bit val to servos
 148:	f8 01       	movw	r30, r16
 14a:	61 91       	ld	r22, Z+
 14c:	8f 01       	movw	r16, r30
 14e:	8c 2f       	mov	r24, r28
 150:	0e 94 76 00 	call	0xec	; 0xec <writepotval>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f e3       	ldi	r24, 0x3F	; 63
 156:	9c e9       	ldi	r25, 0x9C	; 156
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <setmotorspot+0x1c>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <setmotorspot+0x22>
 15e:	00 00       	nop
 160:	cf 5f       	subi	r28, 0xFF	; 255
		_delay_ms(10);
	}
}

void setmotorspot(){
	for(int i=0;i<N_SERVOS;i++)
 162:	c8 30       	cpi	r28, 0x08	; 8
 164:	89 f7       	brne	.-30     	; 0x148 <setmotorspot+0xc>
	{
		writepotval(i, motoranglesvalues[i]);//write 8-bit val to servos
		_delay_ms(10);
	}
}
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	08 95       	ret

0000016e <main>:
void setmotors();
void setmotorspot();


int main(void)
{
 16e:	ef e1       	ldi	r30, 0x1F	; 31
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	87 e2       	ldi	r24, 0x27	; 39
 174:	91 e0       	ldi	r25, 0x01	; 1
	//DDRB=0x01;//New Line
	
	
	for(int i=0;i<N_SERVOS;i++){
		motoranglesvalues[i]=0; //setting all servos to 0 initially
 176:	11 92       	st	Z+, r1
int main(void)
{
	//DDRB=0x01;//New Line
	
	
	for(int i=0;i<N_SERVOS;i++){
 178:	e8 17       	cp	r30, r24
 17a:	f9 07       	cpc	r31, r25
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x8>
		motoranglesvalues[i]=0; //setting all servos to 0 initially
	}
	//setup Reciever
	setupRX();
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <setupRX>
	//initiliaze timers and servo port
	initServo();
 182:	0e 94 5f 00 	call	0xbe	; 0xbe <initServo>
	sei();
 186:	78 94       	sei
	
	while(1) 
	{
		setmotorspot();//set servo values to values stored in motoranglevalues array
 188:	0e 94 9e 00 	call	0x13c	; 0x13c <setmotorspot>
 18c:	fd cf       	rjmp	.-6      	; 0x188 <main+0x1a>

0000018e <__vector_11>:
}



ISR(TIMER1_COMPA_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	static uint16_t nextStart;
	//static uint8_t servo;
	//static int outputHigh = 1;
	uint16_t currentTime = TCNT1;
 1a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	uint8_t mask;
	mask = servoOutMask[servo];
 1b0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <servo>
 1b4:	e9 2f       	mov	r30, r25
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ee 5f       	subi	r30, 0xFE	; 254
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	80 81       	ld	r24, Z
	
	if (outputLow) 
 1be:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c6:	23 2b       	or	r18, r19
 1c8:	e9 f0       	breq	.+58     	; 0x204 <__vector_11+0x76>
	{
		if (servo>=N_SERVOS-2)
 1ca:	96 30       	cpi	r25, 0x06	; 6
 1cc:	10 f0       	brcs	.+4      	; 0x1d2 <__vector_11+0x44>
		{
			SERVO_PORT2 = mask;	
 1ce:	8b b9       	out	0x0b, r24	; 11
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <__vector_11+0x46>
		}
		else
		{
			SERVO_PORT = mask;	
 1d2:	88 b9       	out	0x08, r24	; 8
		}
		
		// Set the end time for the servo pulse
		OCR1A = currentTime + servoTicks[servo];
 1d4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <servo>
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	e1 5f       	subi	r30, 0xF1	; 241
 1e0:	fe 4f       	sbci	r31, 0xFE	; 254
 1e2:	80 81       	ld	r24, Z
 1e4:	91 81       	ldd	r25, Z+1	; 0x01
 1e6:	84 0f       	add	r24, r20
 1e8:	95 1f       	adc	r25, r21
 1ea:	e8 e8       	ldi	r30, 0x88	; 136
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	91 83       	std	Z+1, r25	; 0x01
 1f0:	80 83       	st	Z, r24
		nextStart = OCR1A + US2TIMER1(SERVO_TIME_DIV);
 1f2:	80 81       	ld	r24, Z
 1f4:	91 81       	ldd	r25, Z+1	; 0x01
 1f6:	80 5c       	subi	r24, 0xC0	; 192
 1f8:	93 46       	sbci	r25, 0x63	; 99
 1fa:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1fe:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 202:	1d c0       	rjmp	.+58     	; 0x23e <__vector_11+0xb0>
	}	 
	else 
	{
		if (servo>=N_SERVOS-2)
 204:	96 30       	cpi	r25, 0x06	; 6
 206:	28 f0       	brcs	.+10     	; 0x212 <__vector_11+0x84>
		{
			SERVO_PORT2 &= ~mask;	
 208:	9b b1       	in	r25, 0x0b	; 11
 20a:	80 95       	com	r24
 20c:	89 23       	and	r24, r25
 20e:	8b b9       	out	0x0b, r24	; 11
 210:	04 c0       	rjmp	.+8      	; 0x21a <__vector_11+0x8c>
		}
		else
		{
			SERVO_PORT &= ~mask;	
 212:	98 b1       	in	r25, 0x08	; 8
 214:	80 95       	com	r24
 216:	89 23       	and	r24, r25
 218:	88 b9       	out	0x08, r24	; 8
		}
		servo++;
 21a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <servo>
 21e:	8f 5f       	subi	r24, 0xFF	; 255
		if (servo == N_SERVOS) 
 220:	88 30       	cpi	r24, 0x08	; 8
 222:	19 f0       	breq	.+6      	; 0x22a <__vector_11+0x9c>
		}
		else
		{
			SERVO_PORT &= ~mask;	
		}
		servo++;
 224:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <servo>
 228:	02 c0       	rjmp	.+4      	; 0x22e <__vector_11+0xa0>
		if (servo == N_SERVOS) 
			{ 
				servo = 0;
 22a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <servo>
			}
		OCR1A = nextStart;
 22e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 232:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 236:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 23a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	}
	outputLow = !outputLow;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 246:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 24a:	23 2b       	or	r18, r19
 24c:	11 f0       	breq	.+4      	; 0x252 <__vector_11+0xc4>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 256:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <__vector_18>:


ISR(USART_RX_vect)
{
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
	//cli();
	motoranglesvalues[idC]=UDR0;
 288:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <idC>
 28c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <idC+0x1>
 290:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 294:	fc 01       	movw	r30, r24
 296:	e1 5e       	subi	r30, 0xE1	; 225
 298:	fe 4f       	sbci	r31, 0xFE	; 254
 29a:	20 83       	st	Z, r18
	if(idC>=(N_SERVOS-1))
 29c:	87 30       	cpi	r24, 0x07	; 7
 29e:	91 05       	cpc	r25, r1
 2a0:	2c f0       	brlt	.+10     	; 0x2ac <__vector_18+0x38>
	{
		idC=0;
 2a2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <idC+0x1>
 2a6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <idC>
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <__vector_18+0x42>
	}
	else
	{
		idC++;
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <idC+0x1>
 2b2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <idC>
	}
	//sei();
}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <__subsf3>:
 2ca:	50 58       	subi	r21, 0x80	; 128

000002cc <__addsf3>:
 2cc:	bb 27       	eor	r27, r27
 2ce:	aa 27       	eor	r26, r26
 2d0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__addsf3x>
 2d4:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__fp_round>
 2d8:	0e 94 b9 02 	call	0x572	; 0x572 <__fp_pscA>
 2dc:	38 f0       	brcs	.+14     	; 0x2ec <__addsf3+0x20>
 2de:	0e 94 c0 02 	call	0x580	; 0x580 <__fp_pscB>
 2e2:	20 f0       	brcs	.+8      	; 0x2ec <__addsf3+0x20>
 2e4:	39 f4       	brne	.+14     	; 0x2f4 <__addsf3+0x28>
 2e6:	9f 3f       	cpi	r25, 0xFF	; 255
 2e8:	19 f4       	brne	.+6      	; 0x2f0 <__addsf3+0x24>
 2ea:	26 f4       	brtc	.+8      	; 0x2f4 <__addsf3+0x28>
 2ec:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_nan>
 2f0:	0e f4       	brtc	.+2      	; 0x2f4 <__addsf3+0x28>
 2f2:	e0 95       	com	r30
 2f4:	e7 fb       	bst	r30, 7
 2f6:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_inf>

000002fa <__addsf3x>:
 2fa:	e9 2f       	mov	r30, r25
 2fc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__fp_split3>
 300:	58 f3       	brcs	.-42     	; 0x2d8 <__addsf3+0xc>
 302:	ba 17       	cp	r27, r26
 304:	62 07       	cpc	r22, r18
 306:	73 07       	cpc	r23, r19
 308:	84 07       	cpc	r24, r20
 30a:	95 07       	cpc	r25, r21
 30c:	20 f0       	brcs	.+8      	; 0x316 <__addsf3x+0x1c>
 30e:	79 f4       	brne	.+30     	; 0x32e <__addsf3x+0x34>
 310:	a6 f5       	brtc	.+104    	; 0x37a <__addsf3x+0x80>
 312:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__fp_zero>
 316:	0e f4       	brtc	.+2      	; 0x31a <__addsf3x+0x20>
 318:	e0 95       	com	r30
 31a:	0b 2e       	mov	r0, r27
 31c:	ba 2f       	mov	r27, r26
 31e:	a0 2d       	mov	r26, r0
 320:	0b 01       	movw	r0, r22
 322:	b9 01       	movw	r22, r18
 324:	90 01       	movw	r18, r0
 326:	0c 01       	movw	r0, r24
 328:	ca 01       	movw	r24, r20
 32a:	a0 01       	movw	r20, r0
 32c:	11 24       	eor	r1, r1
 32e:	ff 27       	eor	r31, r31
 330:	59 1b       	sub	r21, r25
 332:	99 f0       	breq	.+38     	; 0x35a <__addsf3x+0x60>
 334:	59 3f       	cpi	r21, 0xF9	; 249
 336:	50 f4       	brcc	.+20     	; 0x34c <__addsf3x+0x52>
 338:	50 3e       	cpi	r21, 0xE0	; 224
 33a:	68 f1       	brcs	.+90     	; 0x396 <__addsf3x+0x9c>
 33c:	1a 16       	cp	r1, r26
 33e:	f0 40       	sbci	r31, 0x00	; 0
 340:	a2 2f       	mov	r26, r18
 342:	23 2f       	mov	r18, r19
 344:	34 2f       	mov	r19, r20
 346:	44 27       	eor	r20, r20
 348:	58 5f       	subi	r21, 0xF8	; 248
 34a:	f3 cf       	rjmp	.-26     	; 0x332 <__addsf3x+0x38>
 34c:	46 95       	lsr	r20
 34e:	37 95       	ror	r19
 350:	27 95       	ror	r18
 352:	a7 95       	ror	r26
 354:	f0 40       	sbci	r31, 0x00	; 0
 356:	53 95       	inc	r21
 358:	c9 f7       	brne	.-14     	; 0x34c <__addsf3x+0x52>
 35a:	7e f4       	brtc	.+30     	; 0x37a <__addsf3x+0x80>
 35c:	1f 16       	cp	r1, r31
 35e:	ba 0b       	sbc	r27, r26
 360:	62 0b       	sbc	r22, r18
 362:	73 0b       	sbc	r23, r19
 364:	84 0b       	sbc	r24, r20
 366:	ba f0       	brmi	.+46     	; 0x396 <__addsf3x+0x9c>
 368:	91 50       	subi	r25, 0x01	; 1
 36a:	a1 f0       	breq	.+40     	; 0x394 <__addsf3x+0x9a>
 36c:	ff 0f       	add	r31, r31
 36e:	bb 1f       	adc	r27, r27
 370:	66 1f       	adc	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	88 1f       	adc	r24, r24
 376:	c2 f7       	brpl	.-16     	; 0x368 <__addsf3x+0x6e>
 378:	0e c0       	rjmp	.+28     	; 0x396 <__addsf3x+0x9c>
 37a:	ba 0f       	add	r27, r26
 37c:	62 1f       	adc	r22, r18
 37e:	73 1f       	adc	r23, r19
 380:	84 1f       	adc	r24, r20
 382:	48 f4       	brcc	.+18     	; 0x396 <__addsf3x+0x9c>
 384:	87 95       	ror	r24
 386:	77 95       	ror	r23
 388:	67 95       	ror	r22
 38a:	b7 95       	ror	r27
 38c:	f7 95       	ror	r31
 38e:	9e 3f       	cpi	r25, 0xFE	; 254
 390:	08 f0       	brcs	.+2      	; 0x394 <__addsf3x+0x9a>
 392:	b0 cf       	rjmp	.-160    	; 0x2f4 <__addsf3+0x28>
 394:	93 95       	inc	r25
 396:	88 0f       	add	r24, r24
 398:	08 f0       	brcs	.+2      	; 0x39c <__addsf3x+0xa2>
 39a:	99 27       	eor	r25, r25
 39c:	ee 0f       	add	r30, r30
 39e:	97 95       	ror	r25
 3a0:	87 95       	ror	r24
 3a2:	08 95       	ret

000003a4 <__divsf3>:
 3a4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__divsf3x>
 3a8:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__fp_round>
 3ac:	0e 94 c0 02 	call	0x580	; 0x580 <__fp_pscB>
 3b0:	58 f0       	brcs	.+22     	; 0x3c8 <__divsf3+0x24>
 3b2:	0e 94 b9 02 	call	0x572	; 0x572 <__fp_pscA>
 3b6:	40 f0       	brcs	.+16     	; 0x3c8 <__divsf3+0x24>
 3b8:	29 f4       	brne	.+10     	; 0x3c4 <__divsf3+0x20>
 3ba:	5f 3f       	cpi	r21, 0xFF	; 255
 3bc:	29 f0       	breq	.+10     	; 0x3c8 <__divsf3+0x24>
 3be:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_inf>
 3c2:	51 11       	cpse	r21, r1
 3c4:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_szero>
 3c8:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_nan>

000003cc <__divsf3x>:
 3cc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__fp_split3>
 3d0:	68 f3       	brcs	.-38     	; 0x3ac <__divsf3+0x8>

000003d2 <__divsf3_pse>:
 3d2:	99 23       	and	r25, r25
 3d4:	b1 f3       	breq	.-20     	; 0x3c2 <__divsf3+0x1e>
 3d6:	55 23       	and	r21, r21
 3d8:	91 f3       	breq	.-28     	; 0x3be <__divsf3+0x1a>
 3da:	95 1b       	sub	r25, r21
 3dc:	55 0b       	sbc	r21, r21
 3de:	bb 27       	eor	r27, r27
 3e0:	aa 27       	eor	r26, r26
 3e2:	62 17       	cp	r22, r18
 3e4:	73 07       	cpc	r23, r19
 3e6:	84 07       	cpc	r24, r20
 3e8:	38 f0       	brcs	.+14     	; 0x3f8 <__divsf3_pse+0x26>
 3ea:	9f 5f       	subi	r25, 0xFF	; 255
 3ec:	5f 4f       	sbci	r21, 0xFF	; 255
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	44 1f       	adc	r20, r20
 3f4:	aa 1f       	adc	r26, r26
 3f6:	a9 f3       	breq	.-22     	; 0x3e2 <__divsf3_pse+0x10>
 3f8:	35 d0       	rcall	.+106    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 3fa:	0e 2e       	mov	r0, r30
 3fc:	3a f0       	brmi	.+14     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3fe:	e0 e8       	ldi	r30, 0x80	; 128
 400:	32 d0       	rcall	.+100    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 402:	91 50       	subi	r25, 0x01	; 1
 404:	50 40       	sbci	r21, 0x00	; 0
 406:	e6 95       	lsr	r30
 408:	00 1c       	adc	r0, r0
 40a:	ca f7       	brpl	.-14     	; 0x3fe <__divsf3_pse+0x2c>
 40c:	2b d0       	rcall	.+86     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 40e:	fe 2f       	mov	r31, r30
 410:	29 d0       	rcall	.+82     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	88 1f       	adc	r24, r24
 418:	bb 1f       	adc	r27, r27
 41a:	26 17       	cp	r18, r22
 41c:	37 07       	cpc	r19, r23
 41e:	48 07       	cpc	r20, r24
 420:	ab 07       	cpc	r26, r27
 422:	b0 e8       	ldi	r27, 0x80	; 128
 424:	09 f0       	breq	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 426:	bb 0b       	sbc	r27, r27
 428:	80 2d       	mov	r24, r0
 42a:	bf 01       	movw	r22, r30
 42c:	ff 27       	eor	r31, r31
 42e:	93 58       	subi	r25, 0x83	; 131
 430:	5f 4f       	sbci	r21, 0xFF	; 255
 432:	3a f0       	brmi	.+14     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 434:	9e 3f       	cpi	r25, 0xFE	; 254
 436:	51 05       	cpc	r21, r1
 438:	78 f0       	brcs	.+30     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 43a:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_inf>
 43e:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_szero>
 442:	5f 3f       	cpi	r21, 0xFF	; 255
 444:	e4 f3       	brlt	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	98 3e       	cpi	r25, 0xE8	; 232
 448:	d4 f3       	brlt	.-12     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 44a:	86 95       	lsr	r24
 44c:	77 95       	ror	r23
 44e:	67 95       	ror	r22
 450:	b7 95       	ror	r27
 452:	f7 95       	ror	r31
 454:	9f 5f       	subi	r25, 0xFF	; 255
 456:	c9 f7       	brne	.-14     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 458:	88 0f       	add	r24, r24
 45a:	91 1d       	adc	r25, r1
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	97 f9       	bld	r25, 7
 462:	08 95       	ret
 464:	e1 e0       	ldi	r30, 0x01	; 1
 466:	66 0f       	add	r22, r22
 468:	77 1f       	adc	r23, r23
 46a:	88 1f       	adc	r24, r24
 46c:	bb 1f       	adc	r27, r27
 46e:	62 17       	cp	r22, r18
 470:	73 07       	cpc	r23, r19
 472:	84 07       	cpc	r24, r20
 474:	ba 07       	cpc	r27, r26
 476:	20 f0       	brcs	.+8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 478:	62 1b       	sub	r22, r18
 47a:	73 0b       	sbc	r23, r19
 47c:	84 0b       	sbc	r24, r20
 47e:	ba 0b       	sbc	r27, r26
 480:	ee 1f       	adc	r30, r30
 482:	88 f7       	brcc	.-30     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 484:	e0 95       	com	r30
 486:	08 95       	ret

00000488 <__fixunssfsi>:
 488:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_splitA>
 48c:	88 f0       	brcs	.+34     	; 0x4b0 <__fixunssfsi+0x28>
 48e:	9f 57       	subi	r25, 0x7F	; 127
 490:	98 f0       	brcs	.+38     	; 0x4b8 <__fixunssfsi+0x30>
 492:	b9 2f       	mov	r27, r25
 494:	99 27       	eor	r25, r25
 496:	b7 51       	subi	r27, 0x17	; 23
 498:	b0 f0       	brcs	.+44     	; 0x4c6 <__fixunssfsi+0x3e>
 49a:	e1 f0       	breq	.+56     	; 0x4d4 <__fixunssfsi+0x4c>
 49c:	66 0f       	add	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	88 1f       	adc	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	1a f0       	brmi	.+6      	; 0x4ac <__fixunssfsi+0x24>
 4a6:	ba 95       	dec	r27
 4a8:	c9 f7       	brne	.-14     	; 0x49c <__fixunssfsi+0x14>
 4aa:	14 c0       	rjmp	.+40     	; 0x4d4 <__fixunssfsi+0x4c>
 4ac:	b1 30       	cpi	r27, 0x01	; 1
 4ae:	91 f0       	breq	.+36     	; 0x4d4 <__fixunssfsi+0x4c>
 4b0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fp_zero>
 4b4:	b1 e0       	ldi	r27, 0x01	; 1
 4b6:	08 95       	ret
 4b8:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__fp_zero>
 4bc:	67 2f       	mov	r22, r23
 4be:	78 2f       	mov	r23, r24
 4c0:	88 27       	eor	r24, r24
 4c2:	b8 5f       	subi	r27, 0xF8	; 248
 4c4:	39 f0       	breq	.+14     	; 0x4d4 <__fixunssfsi+0x4c>
 4c6:	b9 3f       	cpi	r27, 0xF9	; 249
 4c8:	cc f3       	brlt	.-14     	; 0x4bc <__fixunssfsi+0x34>
 4ca:	86 95       	lsr	r24
 4cc:	77 95       	ror	r23
 4ce:	67 95       	ror	r22
 4d0:	b3 95       	inc	r27
 4d2:	d9 f7       	brne	.-10     	; 0x4ca <__fixunssfsi+0x42>
 4d4:	3e f4       	brtc	.+14     	; 0x4e4 <__fixunssfsi+0x5c>
 4d6:	90 95       	com	r25
 4d8:	80 95       	com	r24
 4da:	70 95       	com	r23
 4dc:	61 95       	neg	r22
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	8f 4f       	sbci	r24, 0xFF	; 255
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	08 95       	ret

000004e6 <__floatunsisf>:
 4e6:	e8 94       	clt
 4e8:	09 c0       	rjmp	.+18     	; 0x4fc <__floatsisf+0x12>

000004ea <__floatsisf>:
 4ea:	97 fb       	bst	r25, 7
 4ec:	3e f4       	brtc	.+14     	; 0x4fc <__floatsisf+0x12>
 4ee:	90 95       	com	r25
 4f0:	80 95       	com	r24
 4f2:	70 95       	com	r23
 4f4:	61 95       	neg	r22
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255
 4f8:	8f 4f       	sbci	r24, 0xFF	; 255
 4fa:	9f 4f       	sbci	r25, 0xFF	; 255
 4fc:	99 23       	and	r25, r25
 4fe:	a9 f0       	breq	.+42     	; 0x52a <__floatsisf+0x40>
 500:	f9 2f       	mov	r31, r25
 502:	96 e9       	ldi	r25, 0x96	; 150
 504:	bb 27       	eor	r27, r27
 506:	93 95       	inc	r25
 508:	f6 95       	lsr	r31
 50a:	87 95       	ror	r24
 50c:	77 95       	ror	r23
 50e:	67 95       	ror	r22
 510:	b7 95       	ror	r27
 512:	f1 11       	cpse	r31, r1
 514:	f8 cf       	rjmp	.-16     	; 0x506 <__floatsisf+0x1c>
 516:	fa f4       	brpl	.+62     	; 0x556 <__floatsisf+0x6c>
 518:	bb 0f       	add	r27, r27
 51a:	11 f4       	brne	.+4      	; 0x520 <__floatsisf+0x36>
 51c:	60 ff       	sbrs	r22, 0
 51e:	1b c0       	rjmp	.+54     	; 0x556 <__floatsisf+0x6c>
 520:	6f 5f       	subi	r22, 0xFF	; 255
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	8f 4f       	sbci	r24, 0xFF	; 255
 526:	9f 4f       	sbci	r25, 0xFF	; 255
 528:	16 c0       	rjmp	.+44     	; 0x556 <__floatsisf+0x6c>
 52a:	88 23       	and	r24, r24
 52c:	11 f0       	breq	.+4      	; 0x532 <__floatsisf+0x48>
 52e:	96 e9       	ldi	r25, 0x96	; 150
 530:	11 c0       	rjmp	.+34     	; 0x554 <__floatsisf+0x6a>
 532:	77 23       	and	r23, r23
 534:	21 f0       	breq	.+8      	; 0x53e <__floatsisf+0x54>
 536:	9e e8       	ldi	r25, 0x8E	; 142
 538:	87 2f       	mov	r24, r23
 53a:	76 2f       	mov	r23, r22
 53c:	05 c0       	rjmp	.+10     	; 0x548 <__floatsisf+0x5e>
 53e:	66 23       	and	r22, r22
 540:	71 f0       	breq	.+28     	; 0x55e <__floatsisf+0x74>
 542:	96 e8       	ldi	r25, 0x86	; 134
 544:	86 2f       	mov	r24, r22
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	2a f0       	brmi	.+10     	; 0x556 <__floatsisf+0x6c>
 54c:	9a 95       	dec	r25
 54e:	66 0f       	add	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	88 1f       	adc	r24, r24
 554:	da f7       	brpl	.-10     	; 0x54c <__floatsisf+0x62>
 556:	88 0f       	add	r24, r24
 558:	96 95       	lsr	r25
 55a:	87 95       	ror	r24
 55c:	97 f9       	bld	r25, 7
 55e:	08 95       	ret

00000560 <__fp_inf>:
 560:	97 f9       	bld	r25, 7
 562:	9f 67       	ori	r25, 0x7F	; 127
 564:	80 e8       	ldi	r24, 0x80	; 128
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	08 95       	ret

0000056c <__fp_nan>:
 56c:	9f ef       	ldi	r25, 0xFF	; 255
 56e:	80 ec       	ldi	r24, 0xC0	; 192
 570:	08 95       	ret

00000572 <__fp_pscA>:
 572:	00 24       	eor	r0, r0
 574:	0a 94       	dec	r0
 576:	16 16       	cp	r1, r22
 578:	17 06       	cpc	r1, r23
 57a:	18 06       	cpc	r1, r24
 57c:	09 06       	cpc	r0, r25
 57e:	08 95       	ret

00000580 <__fp_pscB>:
 580:	00 24       	eor	r0, r0
 582:	0a 94       	dec	r0
 584:	12 16       	cp	r1, r18
 586:	13 06       	cpc	r1, r19
 588:	14 06       	cpc	r1, r20
 58a:	05 06       	cpc	r0, r21
 58c:	08 95       	ret

0000058e <__fp_round>:
 58e:	09 2e       	mov	r0, r25
 590:	03 94       	inc	r0
 592:	00 0c       	add	r0, r0
 594:	11 f4       	brne	.+4      	; 0x59a <__fp_round+0xc>
 596:	88 23       	and	r24, r24
 598:	52 f0       	brmi	.+20     	; 0x5ae <__fp_round+0x20>
 59a:	bb 0f       	add	r27, r27
 59c:	40 f4       	brcc	.+16     	; 0x5ae <__fp_round+0x20>
 59e:	bf 2b       	or	r27, r31
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <__fp_round+0x18>
 5a2:	60 ff       	sbrs	r22, 0
 5a4:	04 c0       	rjmp	.+8      	; 0x5ae <__fp_round+0x20>
 5a6:	6f 5f       	subi	r22, 0xFF	; 255
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	8f 4f       	sbci	r24, 0xFF	; 255
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	08 95       	ret

000005b0 <__fp_split3>:
 5b0:	57 fd       	sbrc	r21, 7
 5b2:	90 58       	subi	r25, 0x80	; 128
 5b4:	44 0f       	add	r20, r20
 5b6:	55 1f       	adc	r21, r21
 5b8:	59 f0       	breq	.+22     	; 0x5d0 <__fp_splitA+0x10>
 5ba:	5f 3f       	cpi	r21, 0xFF	; 255
 5bc:	71 f0       	breq	.+28     	; 0x5da <__fp_splitA+0x1a>
 5be:	47 95       	ror	r20

000005c0 <__fp_splitA>:
 5c0:	88 0f       	add	r24, r24
 5c2:	97 fb       	bst	r25, 7
 5c4:	99 1f       	adc	r25, r25
 5c6:	61 f0       	breq	.+24     	; 0x5e0 <__fp_splitA+0x20>
 5c8:	9f 3f       	cpi	r25, 0xFF	; 255
 5ca:	79 f0       	breq	.+30     	; 0x5ea <__fp_splitA+0x2a>
 5cc:	87 95       	ror	r24
 5ce:	08 95       	ret
 5d0:	12 16       	cp	r1, r18
 5d2:	13 06       	cpc	r1, r19
 5d4:	14 06       	cpc	r1, r20
 5d6:	55 1f       	adc	r21, r21
 5d8:	f2 cf       	rjmp	.-28     	; 0x5be <__fp_split3+0xe>
 5da:	46 95       	lsr	r20
 5dc:	f1 df       	rcall	.-30     	; 0x5c0 <__fp_splitA>
 5de:	08 c0       	rjmp	.+16     	; 0x5f0 <__fp_splitA+0x30>
 5e0:	16 16       	cp	r1, r22
 5e2:	17 06       	cpc	r1, r23
 5e4:	18 06       	cpc	r1, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	f1 cf       	rjmp	.-30     	; 0x5cc <__fp_splitA+0xc>
 5ea:	86 95       	lsr	r24
 5ec:	71 05       	cpc	r23, r1
 5ee:	61 05       	cpc	r22, r1
 5f0:	08 94       	sec
 5f2:	08 95       	ret

000005f4 <__fp_zero>:
 5f4:	e8 94       	clt

000005f6 <__fp_szero>:
 5f6:	bb 27       	eor	r27, r27
 5f8:	66 27       	eor	r22, r22
 5fa:	77 27       	eor	r23, r23
 5fc:	cb 01       	movw	r24, r22
 5fe:	97 f9       	bld	r25, 7
 600:	08 95       	ret

00000602 <__mulsf3>:
 602:	0e 94 14 03 	call	0x628	; 0x628 <__mulsf3x>
 606:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__fp_round>
 60a:	0e 94 b9 02 	call	0x572	; 0x572 <__fp_pscA>
 60e:	38 f0       	brcs	.+14     	; 0x61e <__mulsf3+0x1c>
 610:	0e 94 c0 02 	call	0x580	; 0x580 <__fp_pscB>
 614:	20 f0       	brcs	.+8      	; 0x61e <__mulsf3+0x1c>
 616:	95 23       	and	r25, r21
 618:	11 f0       	breq	.+4      	; 0x61e <__mulsf3+0x1c>
 61a:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_inf>
 61e:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_nan>
 622:	11 24       	eor	r1, r1
 624:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_szero>

00000628 <__mulsf3x>:
 628:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__fp_split3>
 62c:	70 f3       	brcs	.-36     	; 0x60a <__mulsf3+0x8>

0000062e <__mulsf3_pse>:
 62e:	95 9f       	mul	r25, r21
 630:	c1 f3       	breq	.-16     	; 0x622 <__mulsf3+0x20>
 632:	95 0f       	add	r25, r21
 634:	50 e0       	ldi	r21, 0x00	; 0
 636:	55 1f       	adc	r21, r21
 638:	62 9f       	mul	r22, r18
 63a:	f0 01       	movw	r30, r0
 63c:	72 9f       	mul	r23, r18
 63e:	bb 27       	eor	r27, r27
 640:	f0 0d       	add	r31, r0
 642:	b1 1d       	adc	r27, r1
 644:	63 9f       	mul	r22, r19
 646:	aa 27       	eor	r26, r26
 648:	f0 0d       	add	r31, r0
 64a:	b1 1d       	adc	r27, r1
 64c:	aa 1f       	adc	r26, r26
 64e:	64 9f       	mul	r22, r20
 650:	66 27       	eor	r22, r22
 652:	b0 0d       	add	r27, r0
 654:	a1 1d       	adc	r26, r1
 656:	66 1f       	adc	r22, r22
 658:	82 9f       	mul	r24, r18
 65a:	22 27       	eor	r18, r18
 65c:	b0 0d       	add	r27, r0
 65e:	a1 1d       	adc	r26, r1
 660:	62 1f       	adc	r22, r18
 662:	73 9f       	mul	r23, r19
 664:	b0 0d       	add	r27, r0
 666:	a1 1d       	adc	r26, r1
 668:	62 1f       	adc	r22, r18
 66a:	83 9f       	mul	r24, r19
 66c:	a0 0d       	add	r26, r0
 66e:	61 1d       	adc	r22, r1
 670:	22 1f       	adc	r18, r18
 672:	74 9f       	mul	r23, r20
 674:	33 27       	eor	r19, r19
 676:	a0 0d       	add	r26, r0
 678:	61 1d       	adc	r22, r1
 67a:	23 1f       	adc	r18, r19
 67c:	84 9f       	mul	r24, r20
 67e:	60 0d       	add	r22, r0
 680:	21 1d       	adc	r18, r1
 682:	82 2f       	mov	r24, r18
 684:	76 2f       	mov	r23, r22
 686:	6a 2f       	mov	r22, r26
 688:	11 24       	eor	r1, r1
 68a:	9f 57       	subi	r25, 0x7F	; 127
 68c:	50 40       	sbci	r21, 0x00	; 0
 68e:	9a f0       	brmi	.+38     	; 0x6b6 <__mulsf3_pse+0x88>
 690:	f1 f0       	breq	.+60     	; 0x6ce <__mulsf3_pse+0xa0>
 692:	88 23       	and	r24, r24
 694:	4a f0       	brmi	.+18     	; 0x6a8 <__mulsf3_pse+0x7a>
 696:	ee 0f       	add	r30, r30
 698:	ff 1f       	adc	r31, r31
 69a:	bb 1f       	adc	r27, r27
 69c:	66 1f       	adc	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	88 1f       	adc	r24, r24
 6a2:	91 50       	subi	r25, 0x01	; 1
 6a4:	50 40       	sbci	r21, 0x00	; 0
 6a6:	a9 f7       	brne	.-22     	; 0x692 <__mulsf3_pse+0x64>
 6a8:	9e 3f       	cpi	r25, 0xFE	; 254
 6aa:	51 05       	cpc	r21, r1
 6ac:	80 f0       	brcs	.+32     	; 0x6ce <__mulsf3_pse+0xa0>
 6ae:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_inf>
 6b2:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_szero>
 6b6:	5f 3f       	cpi	r21, 0xFF	; 255
 6b8:	e4 f3       	brlt	.-8      	; 0x6b2 <__mulsf3_pse+0x84>
 6ba:	98 3e       	cpi	r25, 0xE8	; 232
 6bc:	d4 f3       	brlt	.-12     	; 0x6b2 <__mulsf3_pse+0x84>
 6be:	86 95       	lsr	r24
 6c0:	77 95       	ror	r23
 6c2:	67 95       	ror	r22
 6c4:	b7 95       	ror	r27
 6c6:	f7 95       	ror	r31
 6c8:	e7 95       	ror	r30
 6ca:	9f 5f       	subi	r25, 0xFF	; 255
 6cc:	c1 f7       	brne	.-16     	; 0x6be <__mulsf3_pse+0x90>
 6ce:	fe 2b       	or	r31, r30
 6d0:	88 0f       	add	r24, r24
 6d2:	91 1d       	adc	r25, r1
 6d4:	96 95       	lsr	r25
 6d6:	87 95       	ror	r24
 6d8:	97 f9       	bld	r25, 7
 6da:	08 95       	ret

000006dc <_exit>:
 6dc:	f8 94       	cli

000006de <__stop_program>:
 6de:	ff cf       	rjmp	.-2      	; 0x6de <__stop_program>
